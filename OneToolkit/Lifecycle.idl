import "Metadata.idl";

namespace OneToolkit.Lifecycle
{
	delegate void SuspendableStateChangedEventHandler(ISuspendable sender, SuspendableEventType eventType);

	[OneToolkit.Metadata.Description("Indicates the type of a suspending event.")]
	enum SuspendableEventType
	{
		Suspended, Resumed
	};

	[OneToolkit.Metadata.Description("Represents an object that can suspend and resume.")]
	interface ISuspendable
	{
		[noexcept] Boolean IsSuspended { get; };
		event SuspendableStateChangedEventHandler StateChanged;
	};

	[OneToolkit.Metadata.Description("Represents an object that can be disposed asynchronously.")]
	interface IAsyncClosable requires Windows.Foundation.IClosable
	{
		Windows.Foundation.IAsyncAction CloseAsync();
		Windows.Foundation.IAsyncOperation<Boolean> RequestCloseAsync();
	};

	[OneToolkit.Metadata.Description("Represents an object that can be suspended or resumed asynchronously.")]
	interface IAsyncSuspendable requires ISuspendable
	{
		Windows.Foundation.IAsyncAction SuspendAsync();
		Windows.Foundation.IAsyncAction ResumeAsync();
	};
}