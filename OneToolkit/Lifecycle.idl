namespace OneToolkit.Lifecycle
{
	delegate void SuspendableStateChangedEventHandler(ISuspendable sender, SuspendableEventType eventType);

	enum SuspendableEventType
	{
		Suspended, Resumed
	};

	interface ISuspendable
	{
		[noexcept] Boolean IsSuspended { get; };
		event SuspendableStateChangedEventHandler StateChanged;
	};

	interface IAsyncClosable requires Windows.Foundation.IClosable
	{
		event Windows.Foundation.EventHandler<IAsyncClosable> Closed;
		Windows.Foundation.IAsyncAction CloseAsync();
		Windows.Foundation.IAsyncOperation<Boolean> RequestCloseAsync();
	};

	interface IAsyncSuspendable requires ISuspendable
	{
		Windows.Foundation.IAsyncAction SuspendAsync();
		Windows.Foundation.IAsyncAction ResumeAsync();
	};

	interface IEquatable
	{
		[noexcept] Boolean IsEqual(Object another);
	};

	interface ICloneable requires IEquatable
	{
		Object Clone();
	};
}