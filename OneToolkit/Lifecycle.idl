namespace OneToolkit.Lifecycle
{
	delegate Object SingletonInstanceProvider(Windows.UI.Xaml.Interop.TypeName typeId);

	delegate void SuspendableStateChangedEventHandler(ISuspendable sender, SuspendableEventType eventType);

	enum SuspendableEventType
	{
		Suspended, Resumed
	};

	interface ISuspendable
	{
		[noexcept] Boolean IsSuspended { get; };
		event SuspendableStateChangedEventHandler StateChanged;
	};

	interface IAsyncClosable requires Windows.Foundation.IClosable
	{
		Windows.Foundation.IAsyncAction CloseAsync();
		Windows.Foundation.IAsyncOperation<Boolean> RequestCloseAsync();
	};

	interface IAsyncSuspendable requires ISuspendable
	{
		Windows.Foundation.IAsyncAction SuspendAsync();
		Windows.Foundation.IAsyncAction ResumeAsync();
	};

	interface ITypeCache
	{
		Boolean IsTypePresent(Windows.UI.Xaml.Interop.TypeName typeId);
		Object GetInstance(Windows.UI.Xaml.Interop.TypeName typeId);
		Object GetInstance(Windows.UI.Xaml.Interop.TypeName typeId, SingletonInstanceProvider provider);
		void Emplace(Windows.UI.Xaml.Interop.TypeName typeId, Object instance);
		void Remove(Windows.UI.Xaml.Interop.TypeName typeId);
	};

	[default_interface]
	runtimeclass WeakTypeCache : ITypeCache
	{
		WeakTypeCache();
	}
	
	[default_interface]
	runtimeclass StrongTypeCache : ITypeCache
	{
		StrongTypeCache()
	}
}